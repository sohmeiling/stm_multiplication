multiplication_rt_summary <- data.frame(
mean = combined_rt_summary$mean_multiplyRT,
median = combined_rt_summary$median_multiplyRT,
sd = combined_rt_summary$sd_multiplyRT,
skewness = skewness_value_rt,
kurtosis = kurtosis_value_rt
)
# Add a task column to each summary dataframe
median_rt_summary_df <- median_rt_summary_df %>% mutate(task = "typing")
vpt_summary <- vpt_summary %>% mutate(task = "vpt")
digitspan_summary <- digitspan_summary %>% mutate(task = "digit span")
multiplication_acc_summary <- multiplication_acc_summary %>% mutate(task = "multiplication - acc")
multiplication_rt_summary <- multiplication_rt_summary %>% mutate(task = "multiplication - rt")
# Combine the three dataframes using bind_rows
final_summary <- bind_rows(
digitspan_summary,
vpt_summary,
median_rt_summary_df,
multiplication_acc_summary,
multiplication_rt_summary
)
# Add a task column to each summary dataframe
median_rt_summary_df <- median_rt_summary_df %>% mutate(task = "typing")
vpt_summary <- vpt_summary %>% mutate(task = "vpt")
digitspan_summary <- digitspan_summary %>% mutate(task = "digit span")
multiplication_acc_summary <- multiplication_acc_summary %>% mutate(task = "multiplication - acc")
multiplication_rt_summary <- multiplication_rt_summary %>% mutate(task = "multiplication - rt")
# Combine the three dataframes using bind_rows
final_summary <- bind_rows(
digitspan_summary,
vpt_summary,
median_rt_summary_df,
multiplication_acc_summary,
multiplication_rt_summary
)
# Calculate summary statistics for multiplication production task using dplyr
combined_acc_summary <- combined_df %>%
group_by(participant) %>%
summarise(
mean_multiplyCorr = mean(multiplyCorr),
median_multiplyCorr = median(multiplyCorr),
sd_multiplyCorr = sd(multiplyCorr)
) %>%
ungroup()
# Calculate grand mean of the summary statistics
grand_mean_acc <- combined_acc_summary %>%
summarise(
grand_mean_mean = mean(mean_multiplyCorr),
grand_mean_median = mean(median_multiplyCorr),
grand_mean_sd = mean(sd_multiplyCorr)
)
# Calculate skewness and kurtosis using the psych package for grand mean
skewness_value_acc <- skew(combined_acc_summary$mean_multiplyCorr)
kurtosis_value_acc <- kurtosi(combined_acc_summary$mean_multiplyCorr)
# Create a dataframe for summary statistics
multiplication_acc_summary <- data.frame(
mean = grand_mean_acc$grand_mean_mean,
median = grand_mean_acc$grand_mean_median,
sd = grand_mean_acc$grand_mean_sd,
skewness = skewness_value_acc,
kurtosis = kurtosis_value_acc
)
# -------------------------------------
# Calculate summary statistics for multiplication production task using dplyr
combined_rt_summary <- combined_rt_df %>%
group_by(participant) %>%
summarise(
mean_multiplyRT = mean(multiplyRT),
median_multiplyRT = median(multiplyRT),
sd_multiplyRT = sd(multiplyRT)
) %>%
ungroup()
# Calculate grand mean of the summary statistics
grand_mean_rt <- combined_rt_summary %>%
summarise(
grand_mean_mean = mean(mean_multiplyRT),
grand_mean_median = mean(median_multiplyRT),
grand_mean_sd = mean(sd_multiplyRT)
)
# Calculate skewness and kurtosis using the psych package for grand mean
skewness_value_rt <- skew(combined_rt_summary$mean_multiplyRT)
kurtosis_value_rt <- kurtosi(combined_rt_summary$mean_multiplyRT)
# Create a dataframe for summary statistics
multiplication_rt_summary <- data.frame(
mean = grand_mean_rt$grand_mean_mean,
median = grand_mean_rt$grand_mean_median,
sd = grand_mean_rt$grand_mean_sd,
skewness = skewness_value_rt,
kurtosis = kurtosis_value_rt
)
# Add a task column to each summary dataframe
median_rt_summary_df <- median_rt_summary_df %>% mutate(task = "typing")
vpt_summary <- vpt_summary %>% mutate(task = "vpt")
digitspan_summary <- digitspan_summary %>% mutate(task = "digit span")
multiplication_acc_summary <- multiplication_acc_summary %>% mutate(task = "multiplication - acc")
multiplication_rt_summary <- multiplication_rt_summary %>% mutate(task = "multiplication - rt")
# Combine the three dataframes using bind_rows
final_summary <- bind_rows(
digitspan_summary,
vpt_summary,
median_rt_summary_df,
multiplication_acc_summary,
multiplication_rt_summary
)
# Export the summary dataframe to a CSV file
write.csv(final_summary, "descriptive_summary.csv", row.names = FALSE)
# Extract summary statistics for each task
digit_span_summary <- digitspan_summary %>%
select(-task) # Removing the 'task' column to keep only numeric values
digit_span_summary <- digitspan_summary %>%
dplyr::select(-task)
# Extract summary statistics for each task
digit_span_summary <- dplyr::select(digitspan_summary, -task)
vpt_summary <- dplyr::select(vpt_summary, -task)
typing_summary <- dplyr::select(typing_summary, -task)
# Extract summary statistics for each task
digit_span_summary <- dplyr::select(digitspan_summary, -task)
vpt_summary <- dplyr::select(vpt_summary, -task)
# Calculate summary statistics using dplyr
summary_stats <- digit_df %>%
summarise(
mean_max_digitspan = mean(max_digitspan),
median_max_digitspan = median(max_digitspan),
sd_max_digitspan = sd(max_digitspan)
)
# Calculate skewness and kurtosis using the psych package
skewness_value <- skew(digit_df$max_digitspan)
kurtosis_value <- kurtosi(digit_df$max_digitspan)
# Create a dataframe for summary statistics
digitspan_summary <- data.frame(
mean = summary_stats$mean_max_digitspan,
median = summary_stats$median_max_digitspan,
sd = summary_stats$sd_max_digitspan,
skewness = skewness_value,
kurtosis = kurtosis_value
)
# Calculate summary statistics using dplyr
summary_stats <- vpt_df %>%
summarise(
mean_mean_blocks = mean(mean_blocks),
median_mean_blocks = median(mean_blocks),
sd_mean_blocks = sd(mean_blocks)
)
# Calculate skewness and kurtosis using the psych package
skewness_value <- skew(vpt_df$mean_blocks)
kurtosis_value <- kurtosi(vpt_df$mean_blocks)
# Create a dataframe for summary statistics
vpt_summary <- data.frame(
mean = summary_stats$mean_mean_blocks,
median = summary_stats$median_mean_blocks,
sd = summary_stats$sd_mean_blocks,
skewness = skewness_value,
kurtosis = kurtosis_value
)
# Calculate summary statistics for median_RT using dplyr
median_rt_summary <- typing_df %>%
summarise(
mean_median_RT = mean(median_RT),
median_median_RT = median(median_RT),
sd_median_RT = sd(median_RT)
)
# Calculate skewness and kurtosis for median_RT using the psych package
skewness_median_rt <- skew(typing_df$median_RT)
kurtosis_median_rt <- kurtosi(typing_df$median_RT)
# Create a dataframe for median_RT summary statistics
median_rt_summary_df <- data.frame(
mean = median_rt_summary$mean_median_RT,
median = median_rt_summary$median_median_RT,
sd = median_rt_summary$sd_median_RT,
skewness = skewness_median_rt,
kurtosis = kurtosis_median_rt
)
# Calculate summary statistics for multiplication production task using dplyr
combined_acc_summary <- combined_df %>%
group_by(participant) %>%
summarise(
mean_multiplyCorr = mean(multiplyCorr),
median_multiplyCorr = median(multiplyCorr),
sd_multiplyCorr = sd(multiplyCorr)
) %>%
ungroup()
# Calculate grand mean of the summary statistics
grand_mean_acc <- combined_acc_summary %>%
summarise(
grand_mean_mean = mean(mean_multiplyCorr),
grand_mean_median = mean(median_multiplyCorr),
grand_mean_sd = mean(sd_multiplyCorr)
)
# Calculate skewness and kurtosis using the psych package for grand mean
skewness_value_acc <- skew(combined_acc_summary$mean_multiplyCorr)
kurtosis_value_acc <- kurtosi(combined_acc_summary$mean_multiplyCorr)
# Create a dataframe for summary statistics
multiplication_acc_summary <- data.frame(
mean = grand_mean_acc$grand_mean_mean,
median = grand_mean_acc$grand_mean_median,
sd = grand_mean_acc$grand_mean_sd,
skewness = skewness_value_acc,
kurtosis = kurtosis_value_acc
)
# -------------------------------------
# Calculate summary statistics for multiplication production task using dplyr
combined_rt_summary <- combined_rt_df %>%
group_by(participant) %>%
summarise(
mean_multiplyRT = mean(multiplyRT),
median_multiplyRT = median(multiplyRT),
sd_multiplyRT = sd(multiplyRT)
) %>%
ungroup()
# Calculate grand mean of the summary statistics
grand_mean_rt <- combined_rt_summary %>%
summarise(
grand_mean_mean = mean(mean_multiplyRT),
grand_mean_median = mean(median_multiplyRT),
grand_mean_sd = mean(sd_multiplyRT)
)
# Calculate skewness and kurtosis using the psych package for grand mean
skewness_value_rt <- skew(combined_rt_summary$mean_multiplyRT)
kurtosis_value_rt <- kurtosi(combined_rt_summary$mean_multiplyRT)
# Create a dataframe for summary statistics
multiplication_rt_summary <- data.frame(
mean = grand_mean_rt$grand_mean_mean,
median = grand_mean_rt$grand_mean_median,
sd = grand_mean_rt$grand_mean_sd,
skewness = skewness_value_rt,
kurtosis = kurtosis_value_rt
)
# Add a task column to each summary dataframe
median_rt_summary_df <- median_rt_summary_df %>% mutate(task = "typing")
vpt_summary <- vpt_summary %>% mutate(task = "vpt")
digitspan_summary <- digitspan_summary %>% mutate(task = "digit span")
multiplication_acc_summary <- multiplication_acc_summary %>% mutate(task = "multiplication - acc")
multiplication_rt_summary <- multiplication_rt_summary %>% mutate(task = "multiplication - rt")
# Combine the three dataframes using bind_rows
final_summary <- bind_rows(
digitspan_summary,
vpt_summary,
median_rt_summary_df,
multiplication_acc_summary,
multiplication_rt_summary
)
# Export the summary dataframe to a CSV file
write.csv(final_summary, "descriptive_summary.csv", row.names = FALSE)
# Extract summary statistics for each task
digit_span_summary <- dplyr::select(digitspan_summary, -task)
vpt_summary <- dplyr::select(vpt_summary, -task)
typing_summary <- dplyr::select(median_rt_summary_df, -task)
multiplication_rt_summary <- dplyr::select(multiplication_rt_summary, -task)
multiplication_acc_summary <- dplyr::select(multiplication_acc_summary, -task)
# Combine all the summary statistics into a single dataframe
all_summary <- bind_cols(
digit_span_summary,
vpt_summary,
typing_summary,
multiplication_rt_summary,
multiplication_acc_summary
)
# Calculate the correlation matrix
correlation_matrix <- cor(all_summary)
# Print the correlation matrix
print(correlation_matrix)
View(digit_df)
View(mult_df)
View(typing_df)
View(vpt_df)
combined_acc_summary <- combined_df %>%
group_by(participant) %>%
summarise(
mean_multiplyCorr = mean(multiplyCorr),
median_multiplyCorr = median(multiplyCorr),
sd_multiplyCorr = sd(multiplyCorr)
) %>%
ungroup()
View(combined_acc_summary)
# Calculate summary statistics for multiplication production task using dplyr
combined_rt_summary <- combined_rt_df %>%
group_by(participant) %>%
summarise(
mean_multiplyRT = mean(multiplyRT),
median_multiplyRT = median(multiplyRT),
sd_multiplyRT = sd(multiplyRT)
) %>%
ungroup()
# Extract relevant columns for each task
digit_span_data <- digit_df %>%
select(participant, max_digitspan)
View(digit_df)
# Extract relevant columns for each task
digit_span_data <- digit_df %>%
dplyr::select(participant, max_digitspan)
typing_data <- typing_df %>%
dplyr::select(participant, median_RT)
vpt_data <- vpt_df %>%
dplyr::select(participant, mean_blocks)
# ---------------------------------------------------------
# Calculate summary statistics for multiplication production task using dplyr
combined_acc_summary <- combined_df %>%
group_by(participant) %>%
summarise(
mean_multiplyCorr = mean(multiplyCorr),
median_multiplyCorr = median(multiplyCorr),
sd_multiplyCorr = sd(multiplyCorr)
) %>%
ungroup()
# Calculate summary statistics for multiplication production task using dplyr
combined_rt_summary <- combined_rt_df %>%
group_by(participant) %>%
summarise(
mean_multiplyRT = mean(multiplyRT),
median_multiplyRT = median(multiplyRT),
sd_multiplyRT = sd(multiplyRT)
) %>%
ungroup()
multiplication_rt_data <- combined_acc_summary %>%
dplyr::select(participant, median_multiplyRT)
multiplication_rt_data <- combined_rt_summary %>%
dplyr::select(participant, median_multiplyRT)
multiplication_acc_data <- combined_acc_summary %>%
dplyr::select(participant, mean_multiplyCorr)
# Combine the data to form a single df
all_corr_data <- full_join(
digit_span_data,
typing_data,
by = "participant"
) %>%
full_join(vpt_data, by = "participant") %>%
full_join(multiplication_rt_data, by = "participant") %>%
full_join(multiplication_acc_data, by = "participant")
View(all_corr_data)
# Calculate the correlation matrix
correlation_matrix <- cor(all_data[, -1]) # Exclude the 'participant' column
# Calculate the correlation matrix
correlation_matrix <- cor(all_corr_data[, -1]) # Exclude the 'participant' column
# Example correlation matrix
correlation_matrix <- matrix(c(
1.00, 0.30, 0.50, 0.20, 0.40,
0.30, 1.00, 0.25, 0.10, 0.35,
0.50, 0.25, 1.00, 0.15, 0.45,
0.20, 0.10, 0.15, 1.00, 0.05,
0.40, 0.35, 0.45, 0.05, 1.00
), nrow = 5, byrow = TRUE)
# Create row and column names for the matrix
rownames(correlation_matrix) <- c("Max Digitspan", "Median RT", "Mean Blocks", "Median Multiply RT", "Mean Multiply Corr")
colnames(correlation_matrix) <- c("Max Digitspan", "Median RT", "Mean Blocks", "Median Multiply RT", "Mean Multiply Corr")
# Calculate p-values for the correlation matrix
p_values <- lower.cor(correlation_matrix)
# Example correlation matrix
correlation_matrix <- matrix(c(
1.00, 0.30, 0.50, 0.20, 0.40,
0.30, 1.00, 0.25, 0.10, 0.35,
0.50, 0.25, 1.00, 0.15, 0.45,
0.20, 0.10, 0.15, 1.00, 0.05,
0.40, 0.35, 0.45, 0.05, 1.00
), nrow = 5, byrow = TRUE)
# Calculate p-values for the correlation matrix
p_values <- matrix(NA, ncol = ncol(correlation_matrix), nrow = nrow(correlation_matrix))
for (i in 1:nrow(correlation_matrix)) {
for (j in 1:ncol(correlation_matrix)) {
if (i != j) {
p_values[i, j] <- cor.test(correlation_matrix[i, ], correlation_matrix[j, ])$p.value
}
}
}
# Create row and column names for the matrix
rownames(correlation_matrix) <- c("Max Digitspan", "Median RT", "Mean Blocks", "Median Multiply RT", "Mean Multiply Corr")
colnames(correlation_matrix) <- c("Max Digitspan", "Median RT", "Mean Blocks", "Median Multiply RT", "Mean Multiply Corr")
# Create the APA-formatted correlation table
apa_cor_table <- apa.cor.table(correlation_matrix, p_values)
# Extract relevant columns for each task
digit_span_data <- digit_df %>%
dplyr::select(participant, max_digitspan)
typing_data <- typing_df %>%
dplyr::select(participant, median_RT)
vpt_data <- vpt_df %>%
dplyr::select(participant, mean_blocks)
# ---------------------------------------------------------
# Calculate summary statistics for multiplication production task using dplyr
combined_acc_summary <- combined_df %>%
group_by(participant) %>%
summarise(
mean_multiplyCorr = mean(multiplyCorr),
median_multiplyCorr = median(multiplyCorr),
sd_multiplyCorr = sd(multiplyCorr)
) %>%
ungroup()
# Calculate summary statistics for multiplication production task using dplyr
combined_rt_summary <- combined_rt_df %>%
group_by(participant) %>%
summarise(
mean_multiplyRT = mean(multiplyRT),
median_multiplyRT = median(multiplyRT),
sd_multiplyRT = sd(multiplyRT)
) %>%
ungroup()
multiplication_rt_data <- combined_rt_summary %>%
dplyr::select(participant, median_multiplyRT)
multiplication_acc_data <- combined_acc_summary %>%
dplyr::select(participant, mean_multiplyCorr)
# Combine the data to form a single df
all_corr_data <- full_join(
digit_span_data,
typing_data,
by = "participant"
) %>%
full_join(vpt_data, by = "participant") %>%
full_join(multiplication_rt_data, by = "participant") %>%
full_join(multiplication_acc_data, by = "participant")
# Calculate the correlation matrix
correlation_matrix <- cor(all_corr_data[, -1]) # Exclude the 'participant' column
correlation_matrix
install.packages("apaTables")
install.packages("openxlsx")
library(apaTables)
library(openxlsx)
# Format the correlation matrix using apa.print
formatted_table <- apa.print(correlation_matrix)
# Format the correlation matrix using apa.correlation_table
formatted_table <- apa.correlation_table(correlation_matrix)
# Format the correlation matrix using apa.cor.table
formatted_table <- apa.cor.table(correlation_matrix,
pvalues = p_values,
filename = "correlation_matrix.txt")
# Format the correlation matrix using apa.cor.table
formatted_table <- apa.cor.table(correlation_matrix)
# Create a new workbook and add the formatted table to a sheet
wb <- createWorkbook()
addWorksheet(wb, "Correlation Matrix")
writeData(wb, "Correlation Matrix", formatted_table)
formatted_table
# Format the correlation matrix using apa.cor.table
formatted_table <- apa.cor.table(correlation_matrix)
# Extract the table content and row/column names
table_content <- as.data.frame(formatted_table$content)
row_names <- rownames(table_content)
col_names <- colnames(table_content)
# Create a new workbook and add the formatted table to a sheet
wb <- createWorkbook()
addWorksheet(wb, "Correlation Matrix")
writeData(wb, "Correlation Matrix", table_content, colNames = col_names, rowNames = row_names)
# Format the correlation matrix using apa.cor.table
formatted_table <- apa.cor.table(correlation_matrix)
# Create a new workbook
wb <- createWorkbook()
# Add a worksheet
addWorksheet(wb, "Correlation Matrix")
# Write the formatted table to the worksheet
writeDataTable(wb, "Correlation Matrix", formatted_table$content,
startRow = 1, startCol = 1, colNames = TRUE, rowNames = TRUE)
View(formatted_table)
View(final_summary)
# Format the correlation matrix using apa.cor.table
formatted_table <- apa.cor.table(correlation_matrix)
# Extract the formatted table content
table_content <- formatted_table$content
# Convert the content to a data frame
correlation_df <- as.data.frame(table_content)
View(correlation_df)
View(formatted_table)
# Format the correlation matrix using apa.cor.table
formatted_table <- apa.cor.table(correlation_matrix)
# Extract the components from the formatted_table
table_number <- formatted_table$table.number
table_title <- formatted_table$table.title
table_body <- formatted_table$table.body
table_note <- formatted_table$table.note
# Convert the table.body to a matrix and then to a data frame
table_body_matrix <- as.matrix(table_body)
correlation_df <- as.data.frame(table_body_matrix, stringsAsFactors = FALSE)
# Add row names (participant names)
row_names <- rownames(table_body_matrix)
correlation_df$Participant <- row_names
# Combine the data to form a single df
all_corr_data <- full_join(
digit_span_data,
typing_data,
by = "participant"
) %>%
full_join(vpt_data, by = "participant") %>%
full_join(multiplication_rt_data, by = "participant") %>%
full_join(multiplication_acc_data, by = "participant")
library(corrr)
install.packages("corrr")
library(corrr)
library(corrr)
# Calculate the correlation matrix
correlation_matrix <- all_corr_data %>%
select(-participant) %>%
correlate()
library(corrr)
# Calculate the correlation matrix
correlation_matrix <- all_corr_data %>%
dplyr::select(-participant) %>%
correlate()
# Extract the correlation matrix as a data frame
correlation_df <- correlation_matrix %>%
shave() %>%
as.data.frame()
View(correlation_df)
correlation_df
# p-values
# Calculate p-values using cor.test
p_value_matrix <- sapply(correlation_df, function(col) {
sapply(correlation_df, function(other_col) {
cor.test(col, other_col)$p.value
})
})
# Calculate the p-values using cor_pmat
p_value_matrix <- correlation_matrix %>%
shave() %>%
cor_pmat() %>%
as.data.frame()
View(interference_score)
