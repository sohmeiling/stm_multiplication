baseline_model <- glmer(multiplyCorr ~ rt_z + typing_RT_z +
(1|participant) + (1 | problem),
data = combined_acc_centered,
family = binomial(link = "logit"))
summary(baseline_model)
# Baseline Model (Level 0)
baseline_model <- glmer(multiplyCorr ~ rt_z + typing_RT_z + problem_size +
interference_score_z + verbal_span_z + visual_span_z +
(1|participant) + (1 | problem),
data = combined_acc_centered,
family = binomial(link = "logit"))
summary(baseline_model)
summary(rePCA(baseline_model))
VarCorr(baseline_model)
baseline_model <- glmer(multiplyCorr ~ rt_z + typing_RT_z + problem_size +
interference_score_z + verbal_span_z + visual_span_z +
(1|participant) + (1 | problem),
data = combined_acc_centered,
family = binomial(link = "logit"))
baseline_model <- glmer(multiplyCorr ~ log10_rt + typing_RT_z + problem_size +
interference_score_z + verbal_span_z + visual_span_z +
(1|participant) + (1 | problem),
data = combined_acc_centered,
family = binomial(link = "logit"))
# Baseline Model (Level 0)
baseline_model <- glmer(multiplyCorr ~ log10_rt + typing_RT_z + problem_size +
interference_score_z + verbal_span_z + visual_span_z +
(1|participant) + (1 | problem),
data = combined_acc_centered,
family = binomial(link = "logit"),
control = glmerControl(maxit = 10000))  # Adjust maxit as needed
baseline_model <- glmer(multiplyCorr ~ log10_rt + typing_RT_z + problem_size +
interference_score_z + verbal_span_z + visual_span_z +
(1|participant) + (1 | problem),
data = combined_acc_centered,
family = binomial(link = "logit"),
control = glmerControl(maxit = 1000))
# Baseline Model (Level 0)
baseline_model <- glmer(multiplyCorr ~ log10_rt + typing_RT_z + problem_size +
interference_score_z + verbal_span_z + visual_span_z +
(1|participant) + (1 | problem),
data = combined_acc_centered,
family = binomial(link = "logit"),
control = glmerControl(optCtrl = list(maxfun = 1000)))
summary(rePCA(baseline_model))
VarCorr(baseline_model)
# Baseline Model (Level 0)
baseline_model <- glmer(multiplyCorr ~ log10_rt + typing_RT_z + problem_size +
interference_score_z + verbal_span_z + visual_span_z +
(1|participant) + (1 | problem),
data = combined_acc_centered,
family = binomial(link = "logit"),
control = glmerControl(optCtrl = list(maxfun = 10000)))
summary(rePCA(baseline_model))
VarCorr(baseline_model)
# Baseline Model (Level 0)
baseline_model <- glmer(multiplyCorr ~ log10_rt + typing_RT_z + problem_size +
interference_score_z + verbal_span_z + visual_span_z +
(problem_size |participant) + (interference_score_z | problem),
data = combined_acc_centered,
family = binomial(link = "logit"),
control = glmerControl(optCtrl = list(maxfun = 10000)))
summary(rePCA(baseline_model))
VarCorr(baseline_model)
# Baseline Model (Level 0)
baseline_model <- glmer(multiplyCorr ~ log10_rt + typing_RT_z + problem_size +
interference_score_z + verbal_span_z + visual_span_z +
(problem_size + interference_score_z |participant) + (interference_score_z | problem),
data = combined_acc_centered,
family = binomial(link = "logit"),
control = glmerControl(optCtrl = list(maxfun = 10000)))
summary(rePCA(baseline_model))
VarCorr(baseline_model)
# Baseline Model (Level 0)
baseline_model <- glmer(multiplyCorr ~ log10_rt + typing_RT_z + problem_size +
interference_score_z + verbal_span_z + visual_span_z +
(problem_size + interference_score_z |participant) + (interference_score_z | problem),
data = combined_acc_centered,
family = binomial(link = "logit"),
control = glmerControl(optCtrl = list(maxfun = 20000)))
summary(rePCA(baseline_model))
VarCorr(baseline_model)
# Baseline Model (Level 0)
baseline_model <- glmer(multiplyCorr ~ log10_rt + typing_RT_z + problem_size +
interference_score_z + verbal_span_z + visual_span_z +
(problem_size + interference_score_z |participant) + (1 | problem),
data = combined_acc_centered,
family = binomial(link = "logit"),
control = glmerControl(optCtrl = list(maxfun = 20000)))
summary(rePCA(baseline_model))
VarCorr(baseline_model)
# Baseline Model (Level 0)
baseline_model <- glmer(multiplyCorr ~ log10_rt + typing_RT_z + problem_size +
interference_score_z + verbal_span_z + visual_span_z +
(1 |participant) + (1 | problem),
data = combined_acc_centered,
family = binomial(link = "logit"),
control = glmerControl(optCtrl = list(maxfun = 20000)))
summary(rePCA(baseline_model))
VarCorr(baseline_model)
# using datawizard package, datawizard::standardize()
combined_rt_centered <- combined_rt_df %>%
mutate(participant = as.factor(participant)) %>%
mutate(problem_size = as.factor(problem_size)) %>%
mutate(interference_score_c = datawizard::center(interference_score),
verbal_span_c = datawizard::center(verbal_span_mean),
visual_span_c = datawizard::center(visual_span_mean),
typing_RT_c = datawizard::center(median_RT),
interference_score_z = datawizard::standardize(interference_score),
verbal_span_z = datawizard::standardize(verbal_span_mean),
visual_span_z = datawizard::standardize(visual_span_mean),
typing_RT_z = datawizard::standardize(median_RT))
combined_acc_centered <- combined_acc_df %>%
mutate(participant = as.factor(participant)) %>%
mutate(problem_size = as.factor(problem_size)) %>%
mutate(interference_score_c = datawizard::center(interference_score),
verbal_span_c = datawizard::center(verbal_span_mean),
visual_span_c = datawizard::center(visual_span_mean),
typing_RT_c = datawizard::center(median_RT),
interference_score_z = datawizard::standardize(interference_score),
verbal_span_z = datawizard::standardize(verbal_span_mean),
visual_span_z = datawizard::standardize(visual_span_mean),
typing_RT_z = datawizard::standardize(median_RT),
rt_z = datawizard::standardise(multiplyRT))
# Assuming 'multiplyCorr' is a numeric vector
combined_rt_centered$multiplyCorr <- factor(combined_rt_centered$multiplyCorr,
levels = c(0, 1),
labels = c("Wrong", "Correct"))
# Baseline Model (Level 0)
baseline_model <- glmer(multiplyCorr ~ log10_rt + typing_RT_z + problem_size +
interference_score_z + verbal_span_z + visual_span_z +
(1 |participant) + (1 | problem),
data = combined_acc_centered,
family = binomial(link = "logit"),
control = glmerControl(optCtrl = list(maxfun = 20000)))
summary(rePCA(baseline_model))
VarCorr(baseline_model)
# Baseline Model (Level 0)
baseline_model <- glmer(multiplyCorr ~ typing_RT_z + problem_size +
interference_score_z + verbal_span_z + visual_span_z +
(1 |participant) + (1 | problem),
data = combined_acc_centered,
family = binomial(link = "logit"),
control = glmerControl(optCtrl = list(maxfun = 20000)))
summary(rePCA(baseline_model))
VarCorr(baseline_model)
# Baseline Model (Level 0)
baseline_model <- glmer(multiplyCorr ~ typing_RT_z + problem_size +
interference_score_z + verbal_span_z + visual_span_z +
(1 | problem),
data = combined_acc_centered,
family = binomial(link = "logit"),
control = glmerControl(optCtrl = list(maxfun = 20000)))
summary(rePCA(baseline_model))
VarCorr(baseline_model)
# Baseline Model (Level 0)
baseline_model <- glmer(multiplyCorr ~ log10_rt + typing_RT_z + problem_size +
interference_score_z + verbal_span_z + visual_span_z +
(1 | problem),
data = combined_acc_centered,
family = binomial(link = "logit"),
control = glmerControl(optCtrl = list(maxfun = 20000)))
summary(rePCA(baseline_model))
VarCorr(baseline_model)
# Baseline Model (Level 0)
baseline_model <- glmer(multiplyCorr ~ log10_rt + typing_RT_z + problem_size +
interference_score_z + verbal_span_z + visual_span_z +
(log10_rt | problem),
data = combined_acc_centered,
family = binomial(link = "logit"),
control = glmerControl(optCtrl = list(maxfun = 20000)))
summary(rePCA(baseline_model))
VarCorr(baseline_model)
# Baseline Model (Level 0)
baseline_model <- glmer(multiplyCorr ~ log10_rt + typing_RT_z + problem_size +
interference_score_z + verbal_span_z + visual_span_z +
(log10_rt + typing_RT_z | problem),
data = combined_acc_centered,
family = binomial(link = "logit"),
control = glmerControl(optCtrl = list(maxfun = 20000)))
summary(rePCA(baseline_model))
VarCorr(baseline_model)
# Baseline Model (Level 0)
baseline_model <- glmer(multiplyCorr ~ log10_rt + typing_RT_z + problem_size +
interference_score_z + verbal_span_z + visual_span_z +
(log10_rt + problem_size +
interference_score_z | problem),
data = combined_acc_centered,
family = binomial(link = "logit"),
control = glmerControl(optCtrl = list(maxfun = 20000)))
summary(rePCA(baseline_model))
VarCorr(baseline_model)
# Baseline Model (Level 0)
baseline_model <- glmer(multiplyCorr ~ log10_rt + typing_RT_z + problem_size *
interference_score_z * verbal_span_z * visual_span_z +
(log10_rt | problem),
data = combined_acc_centered,
family = binomial(link = "logit"),
control = glmerControl(optCtrl = list(maxfun = 20000)))
summary(rePCA(baseline_model))
VarCorr(baseline_model)
# Baseline Model (Level 0)
baseline_model <- glmer(multiplyCorr ~ log10_rt + typing_RT_z + problem_size *
interference_score_z * verbal_span_z * visual_span_z +
(log10_rt || problem),
data = combined_acc_centered,
family = binomial(link = "logit"),
control = glmerControl(optCtrl = list(maxfun = 20000)))
summary(rePCA(baseline_model))
VarCorr(baseline_model)
# Baseline Model (Level 0)
baseline_model <- glmer(multiplyCorr ~ log10_rt + typing_RT_z + problem_size *
interference_score_z + verbal_span_z * visual_span_z +
(log10_rt || problem),
data = combined_acc_centered,
family = binomial(link = "logit"),
control = glmerControl(optCtrl = list(maxfun = 20000)))
summary(rePCA(baseline_model))
VarCorr(baseline_model)
summary(baseline_model)
summary(baseline_model)
performance::model_performance(baseline_model)
# Baseline Model (Level 0)
baseline_model <- glmer(multiplyCorr ~ log10_rt + typing_RT_z +
(log10_rt || problem),
data = combined_acc_centered,
family = binomial(link = "logit"),
control = glmerControl(optCtrl = list(maxfun = 20000)))
# Baseline Model (Level 0)
baseline_model <- glmer(multiplyCorr ~ log10_rt + typing_RT_z +
(log10_rt || problem),
data = combined_acc_centered,
family = binomial(link = "logit"),
control = glmerControl(optCtrl = list(maxfun = 20000)))
summary(baseline_model)
# Baseline Model (Level 0)
baseline_model <- glmer(multiplyCorr ~ log10_rt + typing_RT_z +
(log10_rt || problem),
data = combined_acc_centered,
family = binomial(link = "logit"),
control = glmerControl(optCtrl = list(maxfun = 20000)))
summary(baseline_model)
performance::model_performance(baseline_model)
acc_model_1 <- glmer(multiplyCorr ~ log10_rt + typing_RT_z + problem_size +
(log10_rt || problem),
data = combined_acc_centered,
family = binomial(link = "logit"),
control = glmerControl(optCtrl = list(maxfun = 20000)))
summary(acc_model_1)
performance::model_performance(acc_model_1)
acc_model_1 <- glmer(multiplyCorr ~ log10_rt + typing_RT_z + problem_size +
interference_score_z +
(log10_rt || problem),
data = combined_acc_centered,
family = binomial(link = "logit"),
control = glmerControl(optCtrl = list(maxfun = 20000)))
summary(acc_model_1)
performance::model_performance(acc_model_1)
acc_model_2 <- glmer(multiplyCorr ~ log10_rt + typing_RT_z + problem_size +
interference_score_z +
(log10_rt || problem),
data = combined_acc_centered,
family = binomial(link = "logit"),
control = glmerControl(optCtrl = list(maxfun = 20000)))
summary(acc_model_2)
performance::model_performance(acc_model_2)
acc_model_1 <- glmer(multiplyCorr ~ log10_rt + typing_RT_z + problem_size +
(log10_rt || problem),
data = combined_acc_centered,
family = binomial(link = "logit"),
control = glmerControl(optCtrl = list(maxfun = 20000)))
summary(acc_model_1)
performance::model_performance(acc_model_1)
acc_model_2 <- glmer(multiplyCorr ~ log10_rt + typing_RT_z + problem_size +
interference_score_z +
(log10_rt || problem),
data = combined_acc_centered,
family = binomial(link = "logit"),
control = glmerControl(optCtrl = list(maxfun = 20000)))
summary(acc_model_2)
performance::model_performance(acc_model_2)
acc_model_3 <- glmer(multiplyCorr ~ log10_rt + typing_RT_z + problem_size +
interference_score_z + verbal_span_z +
(log10_rt || problem),
data = combined_acc_centered,
family = binomial(link = "logit"),
control = glmerControl(optCtrl = list(maxfun = 20000)))
summary(acc_model_3)
performance::model_performance(acc_model_3)
acc_model_4 <- glmer(multiplyCorr ~ log10_rt + typing_RT_z + problem_size +
interference_score_z + verbal_span_z + visual_span_z +
(log10_rt || problem),
data = combined_acc_centered,
family = binomial(link = "logit"),
control = glmerControl(optCtrl = list(maxfun = 20000)))
summary(acc_model_4)
performance::model_performance(acc_model_4)
tab_model(acc_model_1, acc_model_2, acc_model_3, acc_model_4)
m_0 <- lmer(log10_rt ~ typing_RT_z  +
(problem_size + interference_score_z | participant) +
(1 | problem),
data = combined_rt_centered,
REML = FALSE,
control=lmerControl(optimizer="bobyqa",
optCtrl=list(maxfun=10000)))
# Summary and hypothesis tests for the model
summary(m_0)
anova(m_0, type = "III") # Type III tests
performance::model_performance(m_0)
# Fit the model
m_1a <- lmer(log10_rt ~ typing_RT_z + problem_size  +
(problem_size + interference_score_z | participant) +
(1 | problem),
data = combined_rt_centered,
REML = FALSE,
control=lmerControl(optimizer="bobyqa",
optCtrl=list(maxfun=10000)))
# Summary and hypothesis tests for the model
summary(m_1a)
anova(m_1a, type = "III") # Type III tests
performance::model_performance(m_1a)
# Fit the model
m_2a <- lmer(log10_rt ~ typing_RT_z + problem_size + interference_score_z +
(problem_size + interference_score_z | participant) +
(1 | problem),
data = combined_rt_centered,
REML = FALSE,
control=lmerControl(optimizer="bobyqa",
optCtrl=list(maxfun=10000)))
# Summary and hypothesis tests for the model
summary(m_2a)
anova(m_2a, type = "III") # Type III tests
performance::model_performance(m_2a)
# Fit the model
m_3a <- lmer(log10_rt ~ typing_RT_z + problem_size + interference_score_z +
verbal_span_z +
(problem_size + interference_score_z | participant) +
(1 | problem),
data = combined_rt_centered,
REML = FALSE,
control=lmerControl(optimizer="bobyqa",
optCtrl=list(maxfun=10000)))
# Summary and hypothesis tests for the model
summary(m_3a)
anova(m_3a, type = "III") # Type III tests
performance::model_performance(m_3a)
# Fit the model
m_4a <- lmer(log10_rt ~ typing_RT_z + problem_size + interference_score_z +
verbal_span_z + visual_span_z +
(problem_size + interference_score_z | participant) +
(1 | problem),
data = combined_rt_centered,
REML = FALSE,
control=lmerControl(optimizer="bobyqa",
optCtrl=list(maxfun=10000)))
# Summary and hypothesis tests for the model
summary(m_4a)
anova(m_4a, type = "III") # Type III tests
performance::model_performance(m_4a)
# Fit the model
m_5a <- lmer(log10_rt ~ typing_RT_z + problem_size * interference_score_z *
verbal_span_z * visual_span_z +
(problem_size + interference_score_z | participant) +
(1 | problem),
data = combined_rt_centered,
REML = FALSE,
control=lmerControl(optimizer="bobyqa",
optCtrl=list(maxfun=10000)))
# Summary and hypothesis tests for the model
model5_summary = summary(m_5a)
model5_summary
anova(m_5a, type = "III") # Type III tests
performance::model_performance(m_5a)
model_performance(m_0, m_1a, m_2a, m_3a, m_4a, m_5a)
compare_performance(m_0, m_1a, m_2a, m_3a, m_4a, m_5a, verbose = FALSE)
exp(3.05E-01)
exp(4.97E-02)
round(cor(combined_acc_centered),
digits = 2 # rounded to 2 decimals
)
corr_data <- combined_acc_centered %>%
select(multiplyRT, multiplyCorr, verbal_span_z, visual_span_z, interference_score_z, problem_size)
View(corr_data)
round(cor(corr_data), digits = 2)
corr_data <- combined_acc_centered %>%
select(multiplyRT, multiplyCorr, verbal_span_z, visual_span_z, interference_score_z, problem_size) %>%
mutate_all(as.numeric)
round(cor(corr_data), digits = 2)
cor_table <- round(cor(corr_data), digits = 2)
View(cor_table)
library(ggplot2)
ggplot(corr_data) +
aes(x = multiplyCorr, y = multiplyRT) +
geom_point(colour = "#0c4c8a") +
theme_minimal()
ggplot(corr_data) +
aes(x = multiplyRT, y = multiplyCorr) +
geom_point(colour = "#0c4c8a") +
theme_minimal()
ggplot(corr_data) +
aes(x = multiplyRT, y = multiplyCorr, group = problem_size) +
geom_point(colour = "#0c4c8a") +
theme_minimal()
ggplot(corr_data) +
aes(x = multiplyRT, y = multiplyCorr, color = problem_size) +
geom_point(colour = "#0c4c8a") +
theme_minimal()
```
ggplot(corr_data) +
aes(x = multiplyRT, y = multiplyCorr, color = problem_size) +
geom_point(colour = "#0c4c8a") +
theme_minimal()
ggplot(corr_data) +
aes(x = multiplyRT, y = multiplyCorr, color = problem_size) +
geom_point() +
theme_minimal()
corr_data <- combined_acc_centered %>%
select(multiplyRT, multiplyCorr, verbal_span_z, visual_span_z, interference_score_z, problem_size)
corr_data <- combined_acc_centered %>%
select(multiplyRT, multiplyCorr, verbal_span_z, visual_span_z, interference_score_z, problem_size) %>%
mutate_all(as.numeric)
corr_data <- combined_acc_centered %>%
select(multiplyRT, multiplyCorr, verbal_span_z, visual_span_z, interference_score_z, problem_size)
corr_data
corr_data <- combined_acc_centered %>%
select(multiplyRT, multiplyCorr, verbal_span_z,
visual_span_z, interference_score_z, problem_size) %>%
mutate(problem_size = as.double(problem_size))
corr_data <- combined_acc_centered %>%
select(multiplyRT, multiplyCorr, verbal_span_z,
visual_span_z, interference_score_z, problem_size) %>%
mutate(problem_size = as.character(problem_size))
cor_table <- round(cor(corr_data), digits = 2)
pairs(corr_data)
corr_data <- combined_acc_centered %>%
select(multiplyRT, multiplyCorr, verbal_span_z,
visual_span_z, interference_score_z, problem_size) %>%
mutate(problem_size = as.character(problem_size))
corr_data <- combined_acc_centered %>%
select(multiplyRT, multiplyCorr, verbal_span_z,
visual_span_z, interference_score_z, problem_size) %>%
mutate(problem_size = as.numeric(problem_size))
pairs(corr_data)
plot_cor <- pairs(corr_data)
plot_cor
pairs(corr_data)
library(correlation)
correlation::correlation(corr_data,
include_factors = TRUE, method = "auto"
)
# Baseline Model (Level 0)
baseline_model <- glmer(multiplyCorr ~ log10_rt + typing_RT_z +
(log10_rt || problem),
data = combined_acc_centered,
family = binomial(link = "logit"),
control = glmerControl(optCtrl = list(maxfun = 20000)))
summary(baseline_model)
performance::model_performance(baseline_model)
acc_model_1 <- glmer(multiplyCorr ~ log10_rt + typing_RT_z + problem_size +
(log10_rt || problem),
data = combined_acc_centered,
family = binomial(link = "logit"),
control = glmerControl(optCtrl = list(maxfun = 20000)))
summary(acc_model_1)
performance::model_performanceacc_model_1)
performance::model_performance(acc_model_1)
acc_model_2 <- glmer(multiplyCorr ~ log10_rt + typing_RT_z + problem_size +
interference_score_z +
(log10_rt || problem),
data = combined_acc_centered,
family = binomial(link = "logit"),
control = glmerControl(optCtrl = list(maxfun = 20000)))
summary(acc_model_2)
performance::model_performance(acc_model_2)
acc_model_3 <- glmer(multiplyCorr ~ log10_rt + typing_RT_z + problem_size +
interference_score_z + verbal_span_z +
(log10_rt || problem),
data = combined_acc_centered,
family = binomial(link = "logit"),
control = glmerControl(optCtrl = list(maxfun = 20000)))
summary(acc_model_3)
performance::model_performance(acc_model_3)
acc_model_4 <- glmer(multiplyCorr ~ log10_rt + typing_RT_z + problem_size +
interference_score_z + verbal_span_z + visual_span_z +
(log10_rt || problem),
data = combined_acc_centered,
family = binomial(link = "logit"),
control = glmerControl(optCtrl = list(maxfun = 20000)))
summary(acc_model_4)
performance::model_performance(acc_model_4)
acc_model_5 <- glmer(multiplyCorr ~ log10_rt + typing_RT_z + problem_size *
interference_score_z * verbal_span_z * visual_span_z +
(log10_rt || problem),
data = combined_acc_centered,
family = binomial(link = "logit"),
control = glmerControl(optCtrl = list(maxfun = 20000)))
summary(acc_model_5)
performance::model_performance(acc_model_5)
tab_model(acc_model_1, acc_model_2, acc_model_3, acc_model_4)
tab_model(baseline_model, acc_model_1, acc_model_2, acc_model_3, acc_model_4)
exp(fixef(acc_model_4))
anova(acc_model_4, acc_model_5)
anova(acc_model_4, acc_model_3)
anova(acc_model_2, acc_model_3)
anova(acc_model_1, acc_model_3)
anova(acc_model_1, acc_model_2)
compare_performance(baseline_model, acc_model_1, acc_model_2, acc_model_3, acc_model_4, verbose = FALSE)
compare_performance(baseline_model, acc_model_1, acc_model_2, acc_model_3, acc_model_4, rank = TRUE)
compare_performance(baseline_model, acc_model_1, acc_model_2, acc_model_3, acc_model_4, rank = TRUE)
anova(acc_model_1, acc_model_4)
anova(acc_model_3, acc_model_4)
anova(acc_model_2, acc_model_3)
